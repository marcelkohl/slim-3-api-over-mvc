<?php

use App\Model\Collection\EmployeeCollection;

use App\Model\DBObject\EmployeeDbo;

class EmployeeDbotest extends Slim3TestCase
{
    /**
     * the id of the employee to be used as reference to test, must exist on database
     * @var int
     */
    private $singleEmployeeId;

    public function setUp()
    {
        parent::setUp();
        $this->singleEmployeeId = 1;
    }

    /**
     * commit test
     */
    public function testCommit()
    {
        $employee = new EmployeeDbo($this->app->getContainer()->get("db"));
        $employee->setName("Employee test");

        $this->assertTrue($employee->commit(), "Commit MUST be successful and return true");
        $this->assertInternalType("int", $employee->getId(), "Employee record MUST have an Integer as Id after commit");
        $this->assertGreaterThan(0, $employee->getId(), "Committed instance MUST have an Id greater than zero");
        $this->assertEquals("Employee test", $employee->getName(), "Committed instance MUST match the committed string name");
    }

    /**
     * getById test
     */
    public function testGetById()
    {
        $employee = EmployeeDbo::getById($this->app->getContainer()->get("db"), $this->singleEmployeeId);

        $this->assertInstanceOf(EmployeeDbo::class, $employee, "getById MUST return a EmployeeDbo instance");
    }

    /**
     * mark as deleted test
     */
    public function testDelete()
    {
        $employee = EmployeeDbo::getById($this->app->getContainer()->get("db"), 1);

        $employee->setDeleted(true);
        $employee->commit();
        $this->assertTrue($employee->isDeleted(), "deleted status of the instance MUST be true");

        $employee->setDeleted(false);
        $employee->commit();
        $this->assertFalse($employee->isDeleted(), "deleted status of the instance MUST be false");
    }

    /**
     * get all test
     */
    public function testGetAll()
    {
        $employees = EmployeeDbo::getAll($this->app->getContainer()->get("db"));

        $this->assertInstanceOf(EmployeeCollection::class, $employees, "getAll MUST return a EmployeeCollection instance");
    }
}
